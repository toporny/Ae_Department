package d16127504_CA3;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class AeDpartment extends JFrame  {

	/**
	 * GUI setup  
	 */
	private static final long serialVersionUID = 1L;

	private static final Logger LOGGER = Logger.getLogger( AeDpartment.class.getName() );

	private JPanel contentPane;
	private JPanel panel_1;
	
	private JTextField txtName;
	private JTextField txtSurname;
	private JTextField txtAddress_1;
	private JTextField textField;
	private JTextField txtPhone;
	private JTextField txtPps;
	private JTextField txtAddress_2;
	private JTextField txtZipcode;
	private JTextField txtDOB;
	private JComboBox<?> priorityComboBox;
	private JTextPane txtSTEP1;
	private JTextPane txtSTEP12patientConditions;
	private JTextPane txtSTEP13finalTreatment;
	private JTable table_1;
	private DoublyLinkedList d;
	private boolean[] columnEditables1 = new boolean[] { true, false, false, false };	
	private String[] columnNames = {"LP","Prt",  "Name", "DateTime"};

	 
	private void removeAllRowsFromTable() {
		DefaultTableModel tableModel = (DefaultTableModel) table_1.getModel();
		if (d.getSize()>0) {
			for (int i=0; i< d.getSize();i++) {
				tableModel.removeRow(0);
			}
		}
	}
	
	private void addAllRowsToTable() {
		DefaultTableModel tableModel = (DefaultTableModel) table_1.getModel();
		String[][] tmpArray = d.getAllAsArrays();
		if (tmpArray == null) return;
		
		LOGGER.info( "tmpArray.length   " + tmpArray.length );
		if (tmpArray.length > 0) {
			for (int i = 0; i < tmpArray.length; i++) {
				String[] dd = {};
				//LOGGER.info( i+",  " + tmpArray[i][0]+" - "+tmpArray[i][1]+ " "+ tmpArray[i][2] );
				dd = new String[] {""+tmpArray[i][0], ""+tmpArray[i][1], ""+tmpArray[i][2], ""+tmpArray[i][3]};
				tableModel.addRow(dd);
			}
		}
	}

	private void fillInputTextsById(int id) {
		Node tmpData = d.findNodeById(id);
		txtName.setText(tmpData.data.getName());
		txtPps.setText(tmpData.data.getPPS());
		txtSurname.setText(tmpData.data.getSurname());
		txtAddress_1.setText(tmpData.data.getAddress1());
		txtAddress_2.setText(tmpData.data.getAddress2());
		txtZipcode.setText(tmpData.data.getZipcode());
		txtPhone.setText(tmpData.data.getPhone());
		txtDOB.setText(tmpData.data.getDOB());
		priorityComboBox.setSelectedItem((tmpData.data.getPriority()>0) ?  "Priority "+tmpData.data.getPriority(): "");
		txtSTEP1.setText(tmpData.data.getBriefSummaryOfCondition());        
		txtSTEP12patientConditions.setText(tmpData.data.getPatientsConditionAndVitalSigns());
		txtSTEP13finalTreatment.setText(tmpData.data.getSummaryOfTheTreatment());
	}
	
	
    private void jTable_ClickMouseClicked(java.awt.event.MouseEvent evt) {                                          
        int index = table_1.getSelectedRow();
        DefaultTableModel tableModel = (DefaultTableModel) table_1.getModel();
        int id = Integer.parseInt(tableModel.getValueAt(index, 0).toString());
        fillInputTextsById(id);
     }                
    
    
    // below code are generated by SWING / design
    // only listeners/actions are made manually
    
	public AeDpartment(DoublyLinkedList d) {
		this.d = d;
		setTitle("[D16127504] A&E DEPARTMENT");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1068, 680);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panel.setBounds(10, 36, 687, 235);
		contentPane.add(panel);
		panel.setLayout(null);
		
		txtName = new JTextField();
		txtName.setBounds(127, 40, 150, 20);
		//txtName.setText("Name");
		panel.add(txtName);
		txtName.setColumns(10);
		
		txtSurname = new JTextField();
		txtSurname.setBounds(127, 70, 150, 20);
		//txtSurname.setText("Surname");
		panel.add(txtSurname);
		txtSurname.setColumns(10);
		
		txtAddress_1 = new JTextField();
		//txtAddress_1.setText("Address1");
		txtAddress_1.setBounds(127, 100, 150, 20);
		panel.add(txtAddress_1);
		txtAddress_1.setColumns(10);
		
		txtSTEP1 = new JTextPane();
		//txtSTEP1.setText("");
		txtSTEP1.setBounds(299, 78, 363, 100);
		panel.add(txtSTEP1);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(707, 36, 319, 594);
		contentPane.add(scrollPane_1);
		
		JButton btnNewButton = new JButton("Submit Data");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addToStorage(panel);
			}
		});
		btnNewButton.setBounds(545, 189, 117, 23);	
		panel.add(btnNewButton);
		
		txtPhone = new JTextField();
		//txtPhone.setText("Phone");
		txtPhone.setColumns(10);
		txtPhone.setBounds(127, 190, 150, 20);
		panel.add(txtPhone);
		
		JLabel lblNewLabel_1 = new JLabel("Name:");
		lblNewLabel_1.setBounds(22, 44, 95, 14);
		panel.add(lblNewLabel_1);
		
		JLabel lblSurname = new JLabel("Surname:");
		lblSurname.setBounds(22, 74, 95, 14);
		panel.add(lblSurname);
		
		JLabel lblAddress = new JLabel("Address line 1:");
		lblAddress.setBounds(22, 103, 95, 14);
		panel.add(lblAddress);
		
		JLabel lblPhone = new JLabel("Phone:");
		lblPhone.setBounds(22, 193, 95, 14);
		panel.add(lblPhone);
		
		txtPps = new JTextField();
		//txtPps.setText("PPS");
		txtPps.setColumns(10);
		txtPps.setBounds(127, 11, 150, 20);
		panel.add(txtPps);
		
		JLabel lblSummaryOfCondition = new JLabel("STEP1. Brief Summary Of Condition:");
		lblSummaryOfCondition.setBounds(299, 53, 363, 14);
		panel.add(lblSummaryOfCondition);
		
		JLabel lblPps = new JLabel("PPS:");
		lblPps.setBounds(22, 13, 95, 14);
		panel.add(lblPps);
		
		txtAddress_2 = new JTextField();
		//txtAddress_2.setText("Address2");
		txtAddress_2.setColumns(10);
		txtAddress_2.setBounds(127, 130, 150, 20);
		panel.add(txtAddress_2);
		
		JLabel lblAddressLine = new JLabel("Address line 2:");
		lblAddressLine.setBounds(22, 133, 95, 14);
		panel.add(lblAddressLine);
		
		JLabel lblZipcode = new JLabel("Zipcode:");
		lblZipcode.setBounds(22, 163, 95, 14);
		panel.add(lblZipcode);
		
		txtZipcode = new JTextField();
		// txtZipcode.setText("Zipcode");
		txtZipcode.setColumns(10);
		txtZipcode.setBounds(127, 160, 150, 20);
		panel.add(txtZipcode);
		
		JLabel lblDateOfBirth = new JLabel("Date of birth (YYYY-MM-DD)");
		lblDateOfBirth.setBounds(299, 13, 197, 14);
		panel.add(lblDateOfBirth);
		
		txtDOB = new JTextField();
		// txtDOB.setText("YYYY-MM-DD");
		txtDOB.setColumns(10);
		txtDOB.setBounds(521, 11, 141, 20);
		panel.add(txtDOB);
		
		JLabel lblNewLabel = new JLabel("STEP 1. INPUT PATIENT DATA:");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 17));
		lblNewLabel.setBounds(10, 11, 495, 14);
		contentPane.add(lblNewLabel);
		
		textField = new JTextField();
		textField.setBounds(648, 356, -477, -165);
		contentPane.add(textField);
		textField.setColumns(10);
		
		panel_1 = new JPanel();
		panel_1.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panel_1.setBounds(10, 282, 687, 143);
		contentPane.add(panel_1);
		panel_1.setLayout(null);
		
		txtSTEP12patientConditions = new JTextPane();
		//txtSTEP12patientConditions.setText("lorem ipsum");
		txtSTEP12patientConditions.setBounds(10, 36, 523, 96);
		panel_1.add(txtSTEP12patientConditions);
		
		JLabel lblPriority = new JLabel("Priority:");
		lblPriority.setBounds(552, 14, 46, 14);
		panel_1.add(lblPriority);
		
		priorityComboBox = new JComboBox();
		priorityComboBox.setModel(new DefaultComboBoxModel(new String[] {"", "Priority 1", "Priority 2", "Priority 3", "Priority 4", "Priority 5", "Priority 6", "Priority 7", "Priority 8", "Priority 9", "Priority 10"}));
		priorityComboBox.setBounds(543, 39, 117, 23);
		panel_1.add(priorityComboBox);
		
		JButton btnUpdateData = new JButton("Update Data");
		btnUpdateData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				String pr = priorityComboBox.getSelectedItem().toString();
				String patientConditions = txtSTEP12patientConditions.getText();

				// protection against submit empty form
				if (pr.equals("") || patientConditions.equals("")) {
					JOptionPane.showMessageDialog(panel, "Please type vital signs and select priority from dropdown list.");					
				}
				else {
					Node tmpNode = d.findNodeByPps(txtPps.getText());
					if (tmpNode != null) {
						int iPriority = Integer.parseInt(pr.substring(9));
						d.updateVitalSign(tmpNode, patientConditions);
						if (tmpNode.data.getPriority() != iPriority) {
							
							removeAllRowsFromTable();
							d.updatePriority(tmpNode, iPriority);
							addAllRowsToTable();
						}
					} else {
						JOptionPane.showMessageDialog(panel, "PPS not found. Can't update");
					}
					 
				}
			}
		});
		
		btnUpdateData.setBounds(543, 109, 117, 23);
		panel_1.add(btnUpdateData);
		
		JLabel label = new JLabel("STEP2. Patients condition and vital signs:");
		label.setBounds(10, 11, 429, 14);
		panel_1.add(label);
		
		JPanel panel_2 = new JPanel();
		panel_2.setLayout(null);
		panel_2.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panel_2.setBounds(10, 436, 687, 143);
		contentPane.add(panel_2);
		
		txtSTEP13finalTreatment = new JTextPane();
		//txtSTEP13finalTreatment.setText("lorem ipsum");
		txtSTEP13finalTreatment.setBounds(10, 36, 526, 96);
		panel_2.add(txtSTEP13finalTreatment);
		
		JButton button_1 = new JButton("Update Data");
		button_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				Node tmpNode = d.findNodeByPps(txtPps.getText());
				String patientConditions = txtSTEP13finalTreatment.getText();
				if (tmpNode != null) {
					d.updateTreatment(tmpNode, patientConditions);
				}
			
			} 
		});
		button_1.setBounds(546, 109, 117, 23);
		panel_2.add(button_1);
		
		JLabel lblPatientsConditionAnd = new JLabel("STEP3. Final treatment");
		lblPatientsConditionAnd.setBounds(10, 11, 345, 14);
		panel_2.add(lblPatientsConditionAnd);
		
		JPanel panel_3 = new JPanel();
		panel_3.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panel_3.setBounds(10, 590, 687, 40);
		contentPane.add(panel_3);
		panel_3.setLayout(null);
		
		JLabel lblSummaryOfThe = new JLabel("STEP4. If treatment is finished, remove from A&E Departments database.");
		lblSummaryOfThe.setBounds(10, 13, 459, 14);
		panel_3.add(lblSummaryOfThe);
		
		JButton btnRemoveAllData = new JButton("Remove patient data");
		btnRemoveAllData.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				Node n = d.findNodeByPps(txtPps.getText());
				if (n == null) {
					JOptionPane.showMessageDialog(null, "I can't find this PPS ("+txtPps.getText()+") in database");
				} else {
				    //default icon, custom title
					int dialogButton = JOptionPane.YES_NO_OPTION;
		            JOptionPane.showConfirmDialog (null, "Are you sure?","WARNING", dialogButton);
		            if(dialogButton == JOptionPane.YES_OPTION) {
						removeAllRowsFromTable();
						d.deleteNode(n);
						addAllRowsToTable();
		            }
				}
			}
		});
		btnRemoveAllData.setForeground(Color.BLACK);
		btnRemoveAllData.setBounds(491, 9, 176, 23);
	
		panel_3.add(btnRemoveAllData);

		table_1 = new JTable(null, columnNames);
		table_1.addMouseListener(new java.awt.event.MouseAdapter() {
	        public void mouseClicked(java.awt.event.MouseEvent evt) {
	            jTable_ClickMouseClicked(evt);
	        }
	    });
	    
		scrollPane_1.setViewportView(table_1);	
		table_1.setModel(new DefaultTableModel(d.getAllAsArrays(), new String[] { "LP", "Prt", "Name", "DateTime" }) {
			public boolean isCellEditable(int row, int column) {
				return columnEditables1[column];
			}
		});	
		
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
		table_1.getColumnModel().getColumn(0).setPreferredWidth(25);
		table_1.getColumnModel().getColumn(0).setMinWidth(25);
		table_1.getColumnModel().getColumn(0).setMaxWidth(25);
		
		table_1.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
		table_1.getColumnModel().getColumn(1).setResizable(false);
		table_1.getColumnModel().getColumn(1).setPreferredWidth(25);
		table_1.getColumnModel().getColumn(1).setMinWidth(25);
		table_1.getColumnModel().getColumn(1).setMaxWidth(40);
		table_1.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
		table_1.getColumnModel().getColumn(2).setResizable(false);
		table_1.getColumnModel().getColumn(2).setPreferredWidth(130);
		table_1.getColumnModel().getColumn(2).setMinWidth(120);
		table_1.getColumnModel().getColumn(2).setMaxWidth(140);
		table_1.getColumnModel().getColumn(3).setResizable(false);
		table_1.getColumnModel().getColumn(3).setPreferredWidth(100);
		table_1.getColumnModel().getColumn(3).setMinWidth(90);
		table_1.getColumnModel().getColumn(3).setMaxWidth(120);		
		
	
		JLabel lblPatients = new JLabel("PATIENTS LIST");
		lblPatients.setFont(new Font("Tahoma", Font.PLAIN, 17));
		lblPatients.setBounds(707, 11, 170, 14);
		contentPane.add(lblPatients);
		
		JButton btnNewpatient = new JButton("New Patient");
		btnNewpatient.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				txtName.setText(null);
				txtPps.setText(null);
				txtSurname.setText(null);
				txtAddress_1.setText(null);
				txtAddress_2.setText(null);
				txtZipcode.setText(null);
				txtPhone.setText(null);
				txtDOB.setText(null);
				txtSTEP1.setText(null);
				priorityComboBox.setSelectedItem("");
				txtSTEP12patientConditions.setText(null);
				txtSTEP13finalTreatment.setText(null);
			}
		});
		btnNewpatient.setBounds(909, 8, 117, 23);
		contentPane.add(btnNewpatient);
	
	}
	
    private boolean addToStorage(JPanel panel) {
		if (!txtPps.getText().trim().equals("") || !txtName.getText().trim().equals("") || !txtSurname.getText().trim().equals("")) {
			AeRecord tmp_rec = new AeRecord ();
			tmp_rec.setName (txtName.getText());
			tmp_rec.setSurname ( txtSurname.getText());
			tmp_rec.setPPS (txtPps.getText());
			tmp_rec.setDOB (txtDOB.getText());
			tmp_rec.setAddress1 (txtAddress_1.getText());
			tmp_rec.setAddress2 (txtAddress_2.getText());
			tmp_rec.setZipcode (txtZipcode.getText());
			tmp_rec.setPhone (txtPhone.getText());
			tmp_rec.setBriefSummaryOfCondition (txtSTEP1.getText());
			
			Node n = d.findNodeByPps(txtPps.getText());
			if (n == null) {
				removeAllRowsFromTable();
				d.addByPriority(tmp_rec);
				addAllRowsToTable();
			} else {
				removeAllRowsFromTable();
				d.deleteNode(n);
				d.addByPriority(tmp_rec);
				addAllRowsToTable();
				JOptionPane.showMessageDialog(panel, "Patient's data (PPS: "+txtPps.getText()+") updated.");
			}
			return true;
		}
		else {
			JOptionPane.showMessageDialog(panel, "PPS, Name, Surname are required.");
			return false;
		}    	
    }
	
}




